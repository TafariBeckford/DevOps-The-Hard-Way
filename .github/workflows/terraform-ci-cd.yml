name: 'Terraform & Helm'

on:
  push:
    branches: [ "terraform-ci-cd" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false


  helm:
    needs: terraform
    name: 'Helm'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.REGION }}
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
    environment: Terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

      - uses: actions/checkout@v2
      
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.5.0'
          token: ${{ secrets.GITHUB_TOKEN }} 
        id: install

      - name: kubeconfing
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        

      - name: Helm Deploy
        run: |-
            helm repo add eks https://aws.github.io/eks-charts
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set image.repository=${{secrets.ACCOUNT_ID}}.dkr.ecr.${{env.AWS_REGION}}.amazonaws.com/amazon/aws-load-balancer-controller
              --set clusterName=${{ env.CLUSTER_NAME }} \
              --set serviceAccount.create=false \
              --set serviceAccount.name=aws-load-balancer-controller 